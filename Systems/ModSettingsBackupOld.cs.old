//// Simple Mod Checker Plus
//// https://github.com/qstar-inc/cities2-SimpleModChecker
//// StarQ 2024

//using Colossal.PSI.Environment;
//using Game.Modding;
//using Game;
//using Newtonsoft.Json.Linq;
//using Newtonsoft.Json;
//using SimpleModCheckerPlus;
//using System.IO;
//using Colossal.IO.AssetDatabase;
//using System.Collections.Generic;
//using System;
//using Game.Settings;
//using System.Linq;
//using static Game.UI.NameSystem;
//using Game.SceneFlow;

//namespace SimpleModChecker.Systems
//{

//    public interface ISettingsBackup
//    {
//        void SetValue(string property, object value);
//        object GetValue(string property);
//    }

//    public class SettingsBackup : ISettingsBackup
//    {
//        private Dictionary<string, object> settings = [];

//        public void SetValue(string property, object value)
//        {
//            settings[property] = value;
//        }

//        public object GetValue(string property)
//        {
//            return settings.ContainsKey(property) ? settings[property] : null;
//        }
//    }
//    //public class KeybindsModifier
//    //{
//    //    public string Name { get; set; }
//    //    public string Path { get; set; }
//    //}
//    //public class Keybinds
//    //{
//    //    public string Path { get; set; }
//    //    public List<KeybindsModifier> Modifiers { get; set; }
//    //}

//    public class AnarchySettings : SettingsBackup
//    {
//        public bool AnarchicBulldozer
//        {
//            get => (bool)GetValue(nameof(AnarchicBulldozer));
//            set => SetValue(nameof(AnarchicBulldozer), value);
//        }
//        public bool ShowTooltip
//        {
//            get => (bool)GetValue(nameof(ShowTooltip));
//            set => SetValue(nameof(ShowTooltip), value);
//        }
//        public bool FlamingChirper
//        {
//            get => (bool)GetValue(nameof(FlamingChirper));
//            set => SetValue(nameof(FlamingChirper), value);
//        }
//        public bool ToolIcon
//        {
//            get => (bool)GetValue(nameof(ToolIcon));
//            set => SetValue(nameof(ToolIcon), value);
//        }
//        public bool ShowElevationToolOption
//        {
//            get => (bool)GetValue(nameof(ShowElevationToolOption));
//            set => SetValue(nameof(ShowElevationToolOption), value);
//        }
//        public bool ResetElevationWhenChangingPrefab
//        {
//            get => (bool)GetValue(nameof(ResetElevationWhenChangingPrefab));
//            set => SetValue(nameof(ResetElevationWhenChangingPrefab), value);
//        }
//        public bool DisableAnarchyWhileBrushing
//        {
//            get => (bool)GetValue(nameof(DisableAnarchyWhileBrushing));
//            set => SetValue(nameof(DisableAnarchyWhileBrushing), value);
//        }
//        public bool NetworkAnarchyToolOptions
//        {
//            get => (bool)GetValue(nameof(NetworkAnarchyToolOptions));
//            set => SetValue(nameof(NetworkAnarchyToolOptions), value);
//        }
//        public bool NetworkUpgradesToolOptions
//        {
//            get => (bool)GetValue(nameof(NetworkUpgradesToolOptions));
//            set => SetValue(nameof(NetworkUpgradesToolOptions), value);
//        }
//        public bool ElevationStepSlider
//        {
//            get => (bool)GetValue(nameof(ElevationStepSlider));
//            set => SetValue(nameof(ElevationStepSlider), value);
//        }
//        public bool NetworkUpgradesPrefabs
//        {
//            get => (bool)GetValue(nameof(NetworkUpgradesPrefabs));
//            set => SetValue(nameof(NetworkUpgradesPrefabs), value);
//        }
//        public bool ReplaceUpgradesBehavior
//        {
//            get => (bool)GetValue(nameof(ReplaceUpgradesBehavior));
//            set => SetValue(nameof(ReplaceUpgradesBehavior), value);
//        }
//        public float MinimumClearanceBelowElevatedNetworks
//        {
//            get => (float)GetValue(nameof(MinimumClearanceBelowElevatedNetworks));
//            set => SetValue(nameof(MinimumClearanceBelowElevatedNetworks), value);
//        }
//        public bool PreventAccidentalPropCulling
//        {
//            get => (bool)GetValue(nameof(PreventAccidentalPropCulling));
//            set => SetValue(nameof(PreventAccidentalPropCulling), value);
//        }
//        public int PropRefreshFrequency
//        {
//            get => (int)GetValue(nameof(PropRefreshFrequency));
//            set => SetValue(nameof(PropRefreshFrequency), value);
//        }
//        //public string ApplyMimic
//        //{
//        //    get
//        //    {
//        //        var applyMimicObj = GetValue(nameof(ApplyMimic));
//        //        if (applyMimicObj is ProxyBinding applyMimic)
//        //        {
//        //            return JsonConvert.SerializeObject(applyMimic, new JsonSerializerSettings
//        //            {
//        //                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
//        //            });
//        //        }
//        //        else
//        //        {
//        //            throw new InvalidCastException($"The value returned by GetValue is not of type ProxyBinding, it is of type {applyMimicObj?.GetType().Name ?? "null"}.");
//        //        }
//        //    }
//        //    set
//        //    {
//        //        ProxyBinding applyMimic = JsonConvert.DeserializeObject<ProxyBinding>(value);
//        //        SetValue(nameof(ApplyMimic), applyMimic);
//        //    }
//        //}
//        //public ProxyBinding SecondaryApplyMimic
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(SecondaryApplyMimic));
//        //    set => SetValue(nameof(SecondaryApplyMimic), value);
//        //}
//        public bool AllowPlacingMultipleUniqueBuildings
//        {
//            get => (bool)GetValue(nameof(AllowPlacingMultipleUniqueBuildings));
//            set => SetValue(nameof(AllowPlacingMultipleUniqueBuildings), value);
//        }
//        public bool PreventOverrideInEditor
//        {
//            get => (bool)GetValue(nameof(PreventOverrideInEditor));
//            set => SetValue(nameof(PreventOverrideInEditor), value);
//        }
//        //public ProxyBinding ToggleAnarchy
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(ToggleAnarchy));
//        //    set => SetValue(nameof(ToggleAnarchy), value);
//        //}
//        //public ProxyBinding ResetElevation
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(ResetElevation));
//        //    set => SetValue(nameof(ResetElevation), value);
//        //}
//        //public ProxyBinding ElevationStep
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(ElevationStep));
//        //    set => SetValue(nameof(ElevationStep), value);
//        //}
//        //public ProxyBinding IncreaseElevation
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(IncreaseElevation));
//        //    set => SetValue(nameof(IncreaseElevation), value);
//        //}
//        //public ProxyBinding DecreaseElevation
//        //{
//        //    get => (ProxyBinding)GetValue(nameof(DecreaseElevation));
//        //    set => SetValue(nameof(DecreaseElevation), value);
//        //}
//        public bool ElevationLock
//        {
//            get => (bool)GetValue(nameof(ElevationLock));
//            set => SetValue(nameof(ElevationLock), value);
//        }
//    }

//    public class AssetIconLibrarySettings : SettingsBackup
//    {
//        public bool OverwriteIcons
//        {
//            get => (bool)GetValue(nameof(OverwriteIcons));
//            set => SetValue(nameof(OverwriteIcons), value);
//        }
//    }

//    public class FindItSettings : SettingsBackup
//    {
//        public string DefaultViewStyle
//        {
//            get => (string)GetValue(nameof(DefaultViewStyle));
//            set => SetValue(nameof(DefaultViewStyle), value);
//        }
//        public bool OpenPanelOnPicker
//        {
//            get => (bool)GetValue(nameof(OpenPanelOnPicker));
//            set => SetValue(nameof(OpenPanelOnPicker), value);
//        }
//        public bool SelectPrefabOnOpen
//        {
//            get => (bool)GetValue(nameof(SelectPrefabOnOpen));
//            set => SetValue(nameof(SelectPrefabOnOpen), value);
//        }
//        public bool StrictSearch
//        {
//            get => (bool)GetValue(nameof(StrictSearch));
//            set => SetValue(nameof(StrictSearch), value);
//        }
//        public bool HideRandomAssets
//        {
//            get => (bool)GetValue(nameof(HideRandomAssets));
//            set => SetValue(nameof(HideRandomAssets), value);
//        }
//        public bool HideBrandsFromAny
//        {
//            get => (bool)GetValue(nameof(HideBrandsFromAny));
//            set => SetValue(nameof(HideBrandsFromAny), value);
//        }
//        public bool SmoothScroll
//        {
//            get => (bool)GetValue(nameof(SmoothScroll));
//            set => SetValue(nameof(SmoothScroll), value);
//        }
//        public float ScrollSpeed
//        {
//            get => (float)GetValue(nameof(ScrollSpeed));
//            set => SetValue(nameof(ScrollSpeed), value);
//        }
//        public float RowSize
//        {
//            get => (float)GetValue(nameof(RowSize));
//            set => SetValue(nameof(RowSize), value);
//        }
//        public float ColumnSize
//        {
//            get => (float)GetValue(nameof(ColumnSize));
//            set => SetValue(nameof(ColumnSize), value);
//        }
//        public float ExpandedRowSize
//        {
//            get => (float)GetValue(nameof(ExpandedRowSize));
//            set => SetValue(nameof(ExpandedRowSize), value);
//        }
//        public float ExpandedColumnSize
//        {
//            get => (float)GetValue(nameof(ExpandedColumnSize));
//            set => SetValue(nameof(ExpandedColumnSize), value);
//        }
//    }

//    public class FiveTwentyNineTilesSettings : SettingsBackup
//    {
//        public bool UnlockAll
//        {
//            get => (bool)GetValue(nameof(UnlockAll));
//            set => SetValue(nameof(UnlockAll), value);
//        }
//        public bool ExtraTilesAtStart
//        {
//            get => (bool)GetValue(nameof(ExtraTilesAtStart));
//            set => SetValue(nameof(ExtraTilesAtStart), value);
//        }
//        public bool ExtraTilesAtEnd
//        {
//            get => (bool)GetValue(nameof(ExtraTilesAtEnd));
//            set => SetValue(nameof(ExtraTilesAtEnd), value);
//        }
//        public bool AssignToMilestones
//        {
//            get => (bool)GetValue(nameof(AssignToMilestones));
//            set => SetValue(nameof(AssignToMilestones), value);
//        }
//        public float UpkeepMultiplier
//        {
//            get => (float)GetValue(nameof(UpkeepMultiplier));
//            set => SetValue(nameof(UpkeepMultiplier), value);
//        }
//        public bool NoStartingTiles
//        {
//            get => (bool)GetValue(nameof(NoStartingTiles));
//            set => SetValue(nameof(NoStartingTiles), value);
//        }
//        public bool RelockAllTiles
//        {
//            get => (bool)GetValue(nameof(RelockAllTiles));
//            set => SetValue(nameof(RelockAllTiles), value);
//        }
//    }

//    public class PlopTheGrowablesSettings: SettingsBackup
//    {
//        public bool LockPloppedBuildings { get; set; }
//        public bool NoAbandonment { get; set; }
//        public bool DisableLevelling { get; set; }

//    }

//public class SimpleModCheckerSettings : SettingsBackup
//    {
//        public bool ShowNotif
//        {
//            get => (bool)GetValue(nameof(ShowNotif));
//            set => SetValue(nameof(ShowNotif), value);
//        }
//        public bool DeleteMissing
//        {
//            get => (bool)GetValue(nameof(DeleteMissing));
//            set => SetValue(nameof(DeleteMissing), value);
//        }
//        public bool DeleteCorrupted
//        {
//            get => (bool)GetValue(nameof(DeleteCorrupted));
//            set => SetValue(nameof(DeleteCorrupted), value);
//        }
//        public bool AutoRestoreSettingBackupOnStartup
//        {
//            get => (bool)GetValue(nameof(AutoRestoreSettingBackupOnStartup));
//            set => SetValue(nameof(AutoRestoreSettingBackupOnStartup), value);
//        }
//    }

//    public class ModSettings
//    {
//        public AnarchySettings AnarchySettings { get; set; }
//        public AssetIconLibrarySettings AssetIconLibrarySettings { get; set; }
//        public FindItSettings FindItSettings { get; set; }
//        public FiveTwentyNineTilesSettings FiveTwentyNineTilesSettings { get; set; }
//        public PlopTheGrowablesSettings PlopTheGrowablesSettings { get; set; }
//        public SimpleModCheckerSettings SimpleModCheckerSettings { get; set; }
//    }

//    public partial class ModSettingsBackup : GameSystemBase
//    {
//        public Mod _mod;
//        public static ModManager modManager = Mod.modManager;
//        private readonly string backupFile0 = $"{EnvPath.kUserDataPath}\\ModsData\\SimpleModChecker\\ModSettingsBackup_prev.json";
//        private readonly string backupFile1 = $"{EnvPath.kUserDataPath}\\ModsData\\SimpleModChecker\\ModSettingsBackup_1.json";
//        private readonly string backupFile2 = $"{EnvPath.kUserDataPath}\\ModsData\\SimpleModChecker\\ModSettingsBackup_2.json";

//        protected override void OnCreate()
//        {
//            base.OnCreate();
//        }

//        protected override void OnUpdate()
//        {
            
//        }

//        public void CreateBackup(int profile)
//        {
//            string backupFile = profile switch
//            {
//                0 => backupFile0,
//                1 => backupFile1,
//                2 => backupFile2,
//                _ => backupFile1,
//            };
//            Mod.log.Info($"Creating Backup: {Path.GetFileName(backupFile)}");
//            string directoryPath = Path.GetDirectoryName(backupFile);
//            if (!Directory.Exists(directoryPath))
//            {
//                Directory.CreateDirectory(directoryPath);
//            }

//            ModSettings ModSettings = new();

//            AnarchySettings AnarchySettings = new();
//            AssetIconLibrarySettings AssetIconLibrarySettings = new();
//            FindItSettings FindItSettings = new();
//            FiveTwentyNineTilesSettings FiveTwentyNineTilesSettings = new();
//            SimpleModCheckerSettings SimpleModCheckerSettings = new();

//            // Section AnarchySettings Start //
//            bool anarchyFound = GetSettings("Anarchy", AnarchySettings);
//            if (!anarchyFound)
//            {
//                Mod.log.Info("AnarchySettings not found, looking for existing settings.");
//                string jsonStringRead = File.ReadAllText(backupFile);

//                JObject jsonObject = JObject.Parse(jsonStringRead);
//                if (jsonObject["AnarchySettings"] != null)
//                {
//                    Mod.log.Info("Exisiting AnarchySettings found.");
//                    AnarchySettings = jsonObject["AnarchySettings"].ToObject<AnarchySettings>();
//                }
//                else
//                {
//                    Mod.log.Info("Exisiting AnarchySettings not found, setting it to null.");
//                    AnarchySettings = null;
//                }
//            }
//            ModSettings.AnarchySettings = AnarchySettings;
//            // Section AnarchySettings End //

//            // Section AssetIconLibrarySettings Start //
//            bool ailFound = GetSettings("AssetIconLibrary", AssetIconLibrarySettings);
//            if (!ailFound)
//            {
//                Mod.log.Info("AssetIconLibrarySettings not found, looking for existing settings.");
//                string jsonStringRead = File.ReadAllText(backupFile);

//                JObject jsonObject = JObject.Parse(jsonStringRead);
//                if (jsonObject["AssetIconLibrarySettings"] != null)
//                {
//                    Mod.log.Info("Exisiting AssetIconLibrarySettings found.");
//                    AssetIconLibrarySettings = jsonObject["AssetIconLibrarySettings"].ToObject<AssetIconLibrarySettings>();
//                }
//                else
//                {
//                    Mod.log.Info("Exisiting AssetIconLibrarySettings not found, setting it to null.");
//                    AssetIconLibrarySettings = null;
//                }
//            }
//            ModSettings.AssetIconLibrarySettings = AssetIconLibrarySettings;
//            // Section AssetIconLibrarySettings End //

//            // Section FindItSettings Start //
//            bool findItFound = GetSettings("FindIt", FindItSettings);
//            if (!findItFound)
//            {
//                Mod.log.Info("FindItSettings not found, looking for existing settings.");
//                string jsonStringRead = File.ReadAllText(backupFile);

//                JObject jsonObject = JObject.Parse(jsonStringRead);
//                if (jsonObject["FindItSettings"] != null)
//                {
//                    Mod.log.Info("Exisiting FindItSettings found.");
//                    FindItSettings = jsonObject["FindItSettings"].ToObject<FindItSettings>();
//                }
//                else
//                {
//                    Mod.log.Info("Exisiting FindItSettings not found, setting it to null.");
//                    FindItSettings = null;
//                }
//            }
//            ModSettings.FindItSettings = FindItSettings;
//            // Section FindItSettings End //

//            // Section FiveTwentyNineTilesSettings Start //
//            bool fiveTwentyNineFound = GetSettings("529TileSettings", FiveTwentyNineTilesSettings);
//            if (!fiveTwentyNineFound)
//            {
//                Mod.log.Info("FiveTwentyNineTilesSettings not found, looking for existing settings.");
//                string jsonStringRead = File.ReadAllText(backupFile);

//                JObject jsonObject = JObject.Parse(jsonStringRead);
//                if (jsonObject["FiveTwentyNineTilesSettings"] != null)
//                {
//                    Mod.log.Info("Exisiting FiveTwentyNineTilesSettings found.");
//                    FiveTwentyNineTilesSettings = jsonObject["FiveTwentyNineTilesSettings"].ToObject<FiveTwentyNineTilesSettings>();
//                }
//                else
//                {
//                    Mod.log.Info("Exisiting FiveTwentyNineTilesSettings not found, setting it to null.");
//                    FiveTwentyNineTilesSettings = null;
//                }
//            }
//            ModSettings.FiveTwentyNineTilesSettings = FiveTwentyNineTilesSettings;
//            // Section FiveTwentyNineTilesSettings End //

//            // Section SimpleModCheckerSettings Start //
//            bool smcFound = GetSettings("SimpleModChecker", SimpleModCheckerSettings);
//            if (!smcFound)
//            {
//                Mod.log.Info("SimpleModCheckerSettings not found, looking for existing settings.");
//                string jsonStringRead = File.ReadAllText(backupFile);

//                JObject jsonObject = JObject.Parse(jsonStringRead);
//                if (jsonObject["SimpleModCheckerSettings"] != null)
//                {
//                    Mod.log.Info("Exisiting SimpleModCheckerSettings found.");
//                    SimpleModCheckerSettings = jsonObject["SimpleModCheckerSettings"].ToObject<SimpleModCheckerSettings>();
//                }
//                else
//                {
//                    Mod.log.Info("Exisiting SimpleModCheckerSettings not found, setting it to null.");
//                    SimpleModCheckerSettings = null;
//                }
//            }
//            ModSettings.SimpleModCheckerSettings = SimpleModCheckerSettings;
//            // Section SimpleModCheckerSettings End //

//            string jsonString = JsonConvert.SerializeObject(ModSettings, Formatting.Indented);
//            File.WriteAllText(backupFile, jsonString);

//        }

//        public bool GetSettings(string name, ISettingsBackup settingsBackup)
//        {
//            JsonSerializerSettings JsonSerializerSettings = new()
//            {
//                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
//            };
//            try
//            {
//                var settingAssets = AssetDatabase.global.GetAssets<SettingAsset>(name);
//                Mod.log.Info($"Getting settings: {name} ({settingAssets.Count()})");
//                foreach (SettingAsset settingAsset in settingAssets)
//                {
//                    foreach (var fragment in settingAsset)
//                    {
//                        Mod.log.Info($"fragment.source = \"{fragment.source.ToString()}\""); // <--------------------------- REMOVE THIS BEFORE PUBLISHING


//                        // Section AnarchySettings Start //
//                        if (fragment.source.ToString() == "Anarchy.Settings.AnarchyModSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            //Mod.log.Info(source.ToString()); // <-000000000000000000000000000000-------------------------- REMOVE THIS BEFORE PUBLISHING
//                            foreach (var property in source.Properties())
//                            {
//                                settingsBackup.SetValue(property.Name, property.Value.ToObject<object>());
//                            }
//                        }
//                        // Section AnarchySettings End //
//                        else
//                        // Section AssetIconLibrarySettings Start //
//                        if (fragment.source.ToString() == "AssetIconLibrary.Setting")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            foreach (var property in source.Properties())
//                            {
//                                settingsBackup.SetValue(property.Name, property.Value.ToObject<object>());
//                            }
//                        }
//                        // Section AssetIconLibrarySettings End //
//                        else
//                        // Section FindItSettings Start //
//                        if (fragment.source.ToString() == "FindIt.FindItSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            foreach (var property in source.Properties())
//                            {
//                                settingsBackup.SetValue(property.Name, property.Value.ToObject<object>());
//                            }
//                        }
//                        // Section FindItSettings End //
//                        else
//                        // Section FiveTwentyNineTilesSettings Start //
//                        if (fragment.source.ToString() == "FiveTwentyNineTiles.ModSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            foreach (var property in source.Properties())
//                            {
//                                settingsBackup.SetValue(property.Name, property.Value.ToObject<object>());
//                            }
//                        }
//                        // Section FiveTwentyNineTilesSettings End //
//                        else
//                        // Section SimpleModCheckerSettings Start //
//                        if (fragment.source.ToString() == "SimpleModCheckerPlus.Setting")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            foreach (var property in source.Properties())
//                            {
//                                settingsBackup.SetValue(property.Name, property.Value.ToObject<object>());
//                            }
//                        }
//                        // Section SimpleModCheckerSettings End //
//                    }
//                }
//                return true;
//            }
//            catch (Exception ex)
//            {
//                Mod.log.Info($"{name} not found. Skipping backup...");
//                Mod.log.Error(ex);
//                return false;
//            }
//        }

//        public void RestoreBackup(int profile, bool log = true)
//        {
//            string backupFile = profile switch
//            {
//                0 => backupFile0,
//                1 => backupFile1,
//                2 => backupFile2,
//                _ => backupFile1,
//            };
//            if (!File.Exists(backupFile))
//            {
//                Mod.log.Error("Trying to Restore Backup, when Backup file is not found.");
//            }

//            Mod.log.Info("Restoring Backup");
//            string jsonString = File.ReadAllText(backupFile);

//            JObject jsonObject = JObject.Parse(jsonString);
//            // Section AnarchySettings Start //
//            AnarchySettings AnarchySettings = jsonObject["AnarchySettings"].ToObject<AnarchySettings>();

//            if (AnarchySettings != null)
//            {
//                Mod.log.Info("Restoring Anarchy");
//                this.SetSettings("Anarchy", jsonObject);
//            }
//            else
//            {
//                Mod.log.Info("AnarchySettings not found");
//            }
//            // Section AnarchySettings End //

//            // Section AssetIconLibrarySettings Start //
//            AssetIconLibrarySettings AssetIconLibrarySettings = jsonObject["AssetIconLibrarySettings"].ToObject<AssetIconLibrarySettings>();

//            if (AssetIconLibrarySettings != null)
//            {
//                Mod.log.Info("Restoring AssetIconLibrary");
//                this.SetSettings("AssetIconLibrary", jsonObject);
//            }
//            else
//            {
//                Mod.log.Info("AssetIconLibrarySettings not found");
//            }
//            // Section AssetIconLibrarySettings End //

//            // Section FindItSettings Start //
//            FindItSettings FindItSettings = jsonObject["FindItSettings"].ToObject<FindItSettings>();

//            if (FindItSettings != null)
//            {
//                Mod.log.Info("Restoring FindIt");
//                this.SetSettings("FindIt", jsonObject);
//            }
//            else
//            {
//                Mod.log.Info("FindItSettings not found");
//            }
//            // Section FindItSettings End //

//            // Section FiveTwentyNineTilesSettings Start //
//            FiveTwentyNineTilesSettings FiveTwentyNineTilesSettings = jsonObject["FiveTwentyNineTilesSettings"].ToObject<FiveTwentyNineTilesSettings>();

//            if (FiveTwentyNineTilesSettings != null)
//            {
//                Mod.log.Info("Restoring 529TileSettings");
//                this.SetSettings("529TileSettings", jsonObject);
//            }
//            else
//            {
//                Mod.log.Info("FiveTwentyNineTilesSettings not found");
//            }
//            // Section FiveTwentyNineTilesSettings End //

//            // Section SimpleModCheckerSettings Start //
//            SimpleModCheckerSettings SimpleModCheckerSettings = jsonObject["SimpleModCheckerSettings"].ToObject<SimpleModCheckerSettings>();

//            if (SimpleModCheckerSettings != null)
//            {
//                Mod.log.Info("Restoring SimpleModChecker");
//                this.SetSettings("SimpleModChecker", jsonObject);
//            }
//            else
//            {
//                Mod.log.Info("SimpleModCheckerSettings not found");
//            }
//            // Section SimpleModCheckerSettings End //
//        }

//        public void SetSettings(string name, JObject sourceObj)
//        {
//            JsonSerializerSettings JsonSerializerSettings = new()
//            {
//                ReferenceLoopHandling = ReferenceLoopHandling.Ignore
//            };
//            try
//            {
//                var settingAssets = AssetDatabase.global.GetAssets<SettingAsset>(name);

//                foreach (SettingAsset settingAsset in settingAssets)
//                {
//                    foreach (var fragment in settingAsset)
//                    {
//                        // Section AnarchySettings Start //
//                        if (fragment.source.ToString() == "Anarchy.Settings.AnarchyModSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            source["AnarchicBulldozer"] = sourceObj["AnarchySettings"]["AnarchicBulldozer"];
//                            source["ShowTooltip"] = sourceObj["AnarchySettings"]["ShowTooltip"];
//                            source["FlamingChirper"] = sourceObj["AnarchySettings"]["FlamingChirper"];
//                            source["ToolIcon"] = sourceObj["AnarchySettings"]["ToolIcon"];
//                            source["ShowElevationToolOption"] = sourceObj["AnarchySettings"]["ShowElevationToolOption"];
//                            source["ResetElevationWhenChangingPrefab"] = sourceObj["AnarchySettings"]["ResetElevationWhenChangingPrefab"];
//                            source["DisableAnarchyWhileBrushing"] = sourceObj["AnarchySettings"]["DisableAnarchyWhileBrushing"];
//                            source["NetworkAnarchyToolOptions"] = sourceObj["AnarchySettings"]["NetworkAnarchyToolOptions"];
//                            source["NetworkUpgradesToolOptions"] = sourceObj["AnarchySettings"]["NetworkUpgradesToolOptions"];
//                            source["ElevationStepSlider"] = sourceObj["AnarchySettings"]["ElevationStepSlider"];
//                            source["NetworkUpgradesPrefabs"] = sourceObj["AnarchySettings"]["NetworkUpgradesPrefabs"];
//                            source["ReplaceUpgradesBehavior"] = sourceObj["AnarchySettings"]["ReplaceUpgradesBehavior"];
//                            source["MinimumClearanceBelowElevatedNetworks"] = sourceObj["AnarchySettings"]["MinimumClearanceBelowElevatedNetworks"];
//                            source["PreventAccidentalPropCulling"] = sourceObj["AnarchySettings"]["PreventAccidentalPropCulling"];
//                            source["PropRefreshFrequency"] = sourceObj["AnarchySettings"]["PropRefreshFrequency"];
//                            //source["ApplyMimic"] = sourceObj["AnarchySettings"]["ApplyMimic"];
//                            //source["SecondaryApplyMimic"] = sourceObj["AnarchySettings"]["SecondaryApplyMimic"];
//                            source["AllowPlacingMultipleUniqueBuildings"] = sourceObj["AnarchySettings"]["AllowPlacingMultipleUniqueBuildings"];
//                            source["PreventOverrideInEditor"] = sourceObj["AnarchySettings"]["PreventOverrideInEditor"];
//                            //source["ToggleAnarchy"] = sourceObj["AnarchySettings"]["ToggleAnarchy"];
//                            //source["ResetElevation"] = sourceObj["AnarchySettings"]["ResetElevation"];
//                            //source["ElevationStep"] = sourceObj["AnarchySettings"]["ElevationStep"];
//                            //source["IncreaseElevation"] = sourceObj["AnarchySettings"]["IncreaseElevation"];
//                            //source["DecreaseElevation"] = sourceObj["AnarchySettings"]["DecreaseElevation"];
//                            source["ElevationLock"] = sourceObj["AnarchySettings"]["ElevationLock"];
//                            foreach (var prop in source.Properties())
//                            {
//                                var propInfo = fragment.source.GetType().GetProperty(prop.Name);
//                                if (propInfo != null && propInfo.CanWrite && !propInfo.ToString().StartsWith("Game.Input.ProxyBinding"))
//                                {
//                                    propInfo.SetValue(fragment.source, prop.Value.ToObject(propInfo.PropertyType));
//                                }
//                            }
//                            settingAsset.Save();
//                        }
//                        // Section AnarchySettings End //
//                        else
//                        // Section AssetIconLibrarySettings Start //
//                        if (fragment.source.ToString() == "AssetIconLibrary.Setting")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            source["OverwriteIcons"] = sourceObj["AssetIconLibrarySettings"]["OverwriteIcons"];
//                            foreach (var prop in source.Properties())
//                            {
//                                var propInfo = fragment.source.GetType().GetProperty(prop.Name);
//                                if (propInfo != null && propInfo.CanWrite && !propInfo.ToString().StartsWith("Game.Input.ProxyBinding"))
//                                {
//                                    propInfo.SetValue(fragment.source, prop.Value.ToObject(propInfo.PropertyType));
//                                }
//                            }
//                            settingAsset.Save();
//                        }
//                        // Section AssetIconLibrarySettings End //
//                        else
//                        // Section FindItSettings Start //
//                        if (fragment.source.ToString() == "FindIt.FindItSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            source["DefaultViewStyle"] = sourceObj["FindItSettings"]["DefaultViewStyle"];
//                            source["OpenPanelOnPicker"] = sourceObj["FindItSettings"]["OpenPanelOnPicker"];
//                            source["SelectPrefabOnOpen"] = sourceObj["FindItSettings"]["SelectPrefabOnOpen"];
//                            source["StrictSearch"] = sourceObj["FindItSettings"]["StrictSearch"];
//                            source["HideRandomAssets"] = sourceObj["FindItSettings"]["HideRandomAssets"];
//                            source["HideBrandsFromAny"] = sourceObj["FindItSettings"]["HideBrandsFromAny"];
//                            source["SmoothScroll"] = sourceObj["FindItSettings"]["SmoothScroll"];
//                            source["ScrollSpeed"] = sourceObj["FindItSettings"]["ScrollSpeed"];
//                            source["RowSize"] = sourceObj["FindItSettings"]["RowSize"];
//                            source["ColumnSize"] = sourceObj["FindItSettings"]["ColumnSize"];
//                            source["ExpandedRowSize"] = sourceObj["FindItSettings"]["ExpandedRowSize"];
//                            source["ExpandedColumnSize"] = sourceObj["FindItSettings"]["ExpandedColumnSize"];
//                            foreach (var prop in source.Properties())
//                            {
//                                var propInfo = fragment.source.GetType().GetProperty(prop.Name);
//                                if (propInfo != null && propInfo.CanWrite && !propInfo.ToString().StartsWith("Game.Input.ProxyBinding"))
//                                {
//                                    propInfo.SetValue(fragment.source, prop.Value.ToObject(propInfo.PropertyType));
//                                }
//                            }
//                            settingAsset.Save();
//                        }
//                        // Section FindItSettings End //
//                        else
//                        // Section FiveTwentyNineTilesSettings Start //
//                        if (fragment.source.ToString() == "FiveTwentyNineTiles.ModSettings")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            source["UnlockAll"] = sourceObj["FiveTwentyNineTilesSettings"]["UnlockAll"];
//                            source["ExtraTilesAtStart"] = sourceObj["FiveTwentyNineTilesSettings"]["ExtraTilesAtStart"];
//                            source["ExtraTilesAtEnd"] = sourceObj["FiveTwentyNineTilesSettings"]["ExtraTilesAtEnd"];
//                            source["AssignToMilestones"] = sourceObj["FiveTwentyNineTilesSettings"]["AssignToMilestones"];
//                            source["UpkeepMultiplier"] = sourceObj["FiveTwentyNineTilesSettings"]["UpkeepMultiplier"];
//                            source["NoStartingTiles"] = sourceObj["FiveTwentyNineTilesSettings"]["NoStartingTiles"];
//                            source["RelockAllTiles"] = sourceObj["FiveTwentyNineTilesSettings"]["RelockAllTiles"];
//                            foreach (var prop in source.Properties())
//                            {
//                                var propInfo = fragment.source.GetType().GetProperty(prop.Name);
//                                if (propInfo != null && propInfo.CanWrite && !propInfo.ToString().StartsWith("Game.Input.ProxyBinding"))
//                                {
//                                    propInfo.SetValue(fragment.source, prop.Value.ToObject(propInfo.PropertyType));
//                                }
//                            }
//                            settingAsset.Save();
//                        }
//                        // Section FiveTwentyNineTilesSettings End //
//                        else
//                        // Section SimpleModCheckerSettings Start //
//                        if (fragment.source.ToString() == "SimpleModCheckerPlus.Setting")
//                        {
//                            JObject source = JObject.FromObject(fragment.source, JsonSerializer.Create(JsonSerializerSettings));
//                            source["ShowNotif"] = sourceObj["SimpleModCheckerSettings"]["ShowNotif"];
//                            source["DeleteMissing"] = sourceObj["SimpleModCheckerSettings"]["DeleteMissing"];
//                            source["DeleteCorrupted"] = sourceObj["SimpleModCheckerSettings"]["DeleteCorrupted"];
//                            source["AutoRestoreSettingBackupOnStartup"] = sourceObj["SimpleModCheckerSettings"]["AutoRestoreSettingBackupOnStartup"];
//                            foreach (var prop in source.Properties())
//                            {
//                                var propInfo = fragment.source.GetType().GetProperty(prop.Name);
//                                if (propInfo != null && propInfo.CanWrite && !propInfo.ToString().StartsWith("Game.Input.ProxyBinding"))
//                                {
//                                    propInfo.SetValue(fragment.source, prop.Value.ToObject(propInfo.PropertyType));
//                                }
//                            }
//                            settingAsset.Save();
//                        }
//                        // Section SimpleModCheckerSettings End //
//                    }
//                }
//            }
//            catch (Exception ex)
//            {
//                Mod.log.Info($"{name} not found. Skipping restore...");
//                Mod.log.Info(ex);
//            }
//        }

//        public void GetSettingsFiles()
//        {
//            var settingAssets = AssetDatabase.global.GetAssets<SettingAsset>("");
//            Mod.log.Info($"Found: {settingAssets.Count()}");
//            foreach (var item in settingAssets)
//            {
//                Mod.log.Info(item.name);
//            }
//        }
//    }
//}